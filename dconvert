#!/usr/bin/env python3
#  -*- mode:python -*-

# - Michael Eager (michael.eager@monash.edu
# - Monash Biomedical Imaging 
# - (C) 2014 Michael Eager

import os,sys,re

from tkinter import *
from tkinter import ttk
from tkinter import filedialog

def ReadProcpar(procparfilename):
    f = open(procparfilename,'r')
    line = f.readline()
    procpar = {}
    while line != '':
        # parse first line in property
        tokens = line.split()
        propname = tokens[0]
        propsubtype = tokens[1]
        proptype = tokens[2]
        # parse second line in property: [number of values] [first value] ...
        line = f.readline()
        tokens = line.strip().split(None,1)
        propnumvalues = int(tokens[0])        
        # handle property values
        if proptype == '1': # real number
            if propnumvalues == 1:
                propvalue = float(tokens[1])
            else:
                propvalue = map(float, tokens[1].split())
        elif proptype == '2': # string
            if propnumvalues == 1:
                propvalue = tokens[1].strip('"')
            if propnumvalues > 1:
                propvalue = [tokens[1].strip('"')]
                for i in range(2,propnumvalues+1):
                    propvalue.append(f.readline().strip('"\n"'))
        line = f.readline() # last line in property
        line = f.readline() # next property        
        lastprop = propvalue
        procpar[propname] = propvalue
    f.seek(0)
    procpartext = f.readlines()
    return (procpar, procpartext)


def senddaris(*args):
    try:
        daris_ID = darisid.get()
        dicom_dir = outputdir.get()
        cmd = './dpush -c ' + daris_ID + ' -s mf-erc ' + dicom_dir
        os.system(cmd)
    except ValueError:
        pass

def convert(*args):
    try:
        input_dir = inputdir.get()
        output_dir = outputdir.get()
        thispath = os.path.dirname(__file__)
        print(thispath)
        os.system(os.join(thispath,'fdf2dcm.sh') + ' -i ' + input_dir + ' -o ' + output_dir)
    except ValueError:
        pass

def GetDarisID(*args):
    daris_id=''
    try:
        procpar, procpartext = ReadProcpar(inputdir.get() + '/procpar')
        if 'name' in procpar.keys():
            if re.search('DaRIS',procpar['name']):
                daris_id = re.sub('DaRIS\^','',procpar['name'])
    except ValueError:
        pass
    return daris_id


def loadinputdir(*args):
    dir_ = filedialog.askdirectory(initialdir=inputdir.get(), title="Choose FDF directory", mustexist=True) # parent,
    if re.search('img',dir_):
        out = re.sub('img','dcm',dir_)
    else:
        out = dir_+'.dcm'
    inputdir.set(dir_)
    outputdir.set(out)
    darisid.set(GetDarisID())

def loadoutputdir(*args):
    dir_ = filedialog.askdirectory(initialdir=outputdir.get(), title="Choose DICOM directory",mustexist=False) # parent,
    outputdir.set(dir_)



root = Tk()
root.title("FDF to Dicom/3.0 (MBI Agilent)")

mainframe = Frame(root)
mainframe.grid(column=0, row=0, sticky=(N, W, E, S))
mainframe.columnconfigure(0, weight=1)
mainframe.rowconfigure(0, weight=1)


inputdir = StringVar()
outputdir = StringVar()
darisid = StringVar()

if re.search('img',os.getcwd()):
    out = re.sub('img','dcm',os.getcwd())
else:
    out = os.getcwd()+'.dcm'

inputdir.set(os.getcwd())
outputdir.set(out)


inputdir_entry = Entry(mainframe, width=25, textvariable=inputdir)
inputdir_entry.grid(column=2, row=1, sticky=(W, E))

outputdir_entry = Entry(mainframe, width=25, textvariable=outputdir)
outputdir_entry.grid(column=2, row=2, sticky=(W, E))

darisid_entry = Entry(mainframe, width=25, textvariable=darisid)
darisid_entry.grid(column=2, row=3, sticky=(W, E))


#Label(mainframe, textvariable=outputdir).grid(column=2, row=2, sticky=(W, E))
Button(mainframe, text="Choose Dir", command=loadinputdir).grid(column=3,row=1,sticky=W)
Button(mainframe, text="Choose Dir", command=loadoutputdir).grid(column=3,row=2,sticky=W)

Button(mainframe, text="Convert", command=convert).grid(column=2, row=4, sticky=E)
Button(mainframe, text="Send", command=senddaris).grid(column=3, row=4, sticky=W)

Label(mainframe, text="Input dir (FDF img)").grid(column=1, row=1, sticky=W)
Label(mainframe, text="DCM directory").grid(column=1, row=2, sticky=E)
Label(mainframe, text="DaRIS ID").grid(column=1, row=3, sticky=E)


for child in mainframe.winfo_children(): child.grid_configure(padx=5, pady=5)

inputdir_entry.focus()
root.bind('<Return>', convert)

root.mainloop()
