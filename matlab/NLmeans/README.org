# -*- mode: org -*-

Non-local means estimation and correction in 9.4T MR images.

2015 June - Michael Eager (michael.eager@monash.edu)

This code implements the MRIdenoising (Coupe and Manjon, Bordeaux)
using vlfeat's kmean clustering.

The wavelet version PRINLM does not work on the versions of MATLAB on
MASSIVE (massive.org.au).  The pipelines run the MRONLM code for
denoising.


Pipeline 1: standard noise estimation of a single 3D image by
MRINoiseEstimation then denoised.

Pipeline 2: two 3D images are used to calculate the noise estimation
from their diff, then the average image is denoised using the estimate
divided by sqrt(2).

Pipeline 3: two K-space images are run through a homodyne filter, then
the real and imaginary components are separated and follow the same
procedure in pipeline 2, the real and imaginary denoised average
images are then recombined.




* Install vlfeat 

MASSIVE install:

#+BEGIN_SRC sh
module purge
module load build gmp mpc mpfr
module virtualgl matlab

git clone https://github.com/vlfeat/vlfeat.git
cd vlfeat
make
matlab -nodesktop -nosplash -r 'cd ${PWD}/toolbox;run  vl_setup.m; quit'

#+END_SRC


* Clone the SS-DDLS repo

This code has an old version of vlfeat and the MRIdenoisepackage.
#+BEGIN_SRC sh
  git clone https://github.com/UB-TFG-TFM-1415/SS-DDLS.git
#+END_SRC

Make the fixes to the m files below.

[eagerm@m2009 SS-DDLS]$ git diff
diff --git a/Code/Utils/MRIDenoisingPackage/MRIDenoisingPRINLM.m b/Code/Utils/MRIDenoisingPackage/MRIDenoisingPRINLM.m
index 5d7c0e0..f457262 100644
--- a/Code/Utils/MRIDenoisingPackage/MRIDenoisingPRINLM.m
+++ b/Code/Utils/MRIDenoisingPackage/MRIDenoisingPRINLM.m
@@ -84,13 +84,13 @@ disp('**************************************************************************
         
        
             subplot(1,3,1)
-            imagesc(ima(:,:,floor(s(3)/2)),[mini maxi-0.25*maxi])
+            imagesc(ima(:,:,floor(s(3)/2))) %,[mini maxi-0.25*maxi])
             axis image;
             axis off;
             tit = sprintf('Noisy Image');
             title(tit)
             subplot(1,3,2)
-            imagesc(imaPRINLM(:,:,floor(s(3)/2)),[mini maxi-0.25*maxi])
+            imagesc(imaPRINLM(:,:,floor(s(3)/2))) %,[mini maxi-0.25*maxi])
             axis image;
             axis off;
             tit = sprintf('Denoised Image');
diff --git a/Code/Utils/MRIDenoisingPackage/NoiseEstimation/RicianSTD.m b/Code/Utils/MRIDenoisingPackage/NoiseEstimation/RicianSTD.m
index bb06cda..947b174 100644
--- a/Code/Utils/MRIDenoisingPackage/NoiseEstimation/RicianSTD.m
+++ b/Code/Utils/MRIDenoisingPackage/NoiseEstimation/RicianSTD.m
@@ -21,7 +21,7 @@ function [sig maskobj SNR]=RicianSTD(ima, rician)
 %     volume 5762, chapter 73, pages 601-608. Springer Berlin Heidelberg,
 %     Berlin, Heidelberg, 2009.
 
-addpath wavelet
+%addpath wavelet
 
 double(ima);
 s=size(ima);
@@ -46,28 +46,34 @@ tmp = tmp(1:round((s(1)-1)/2),1:round((s(2)-1)/2),1:round((s(3)-1)/2));
 tmp2 = tmp2(1:round((s(1)-1)/2),1:round((s(2)-1)/2),1:round((s(3)-1)/2));
 
 % Detection of the object in the LLL subband
-[mu,mask]=kmeansclassif(tmp2,3);
-th=mean(mu(1:2));
-th2 = mean(mu(3));
-map = (tmp2(:,:,:)>th) & (tmp2(:,:,:)<th2);
+%tic();[mu,mask]=kmeansclassif(tmp2,3);
+%th=mean(mu(1:2));
+%th2 = mean(mu(3));toc()
+[mu, mask, e] = vl_kmeans(tmp2,3, 'initialization', 'plusplus');
+mumean=sort(mean(mu),'ascend');
+th=mean(mumean(1:2));
+th2 = mumean(3);
+map1 = (tmp2(:,:,:)>th) & (tmp2(:,:,:)<th2);
+
+
 
 % Detection of the High gradient area in the LLL subband
 [PX,PY,PZ] = gradient(tmp2);
 GR = sqrt(PX.^2 + PY.^2 + PZ.^2);
-m = median(GR(map));
+m = median(GR(map1));
 map2 = (GR(:,:,:)< (m));
 
 % Map containing Object without strong edges
-map = map & map2;
+map = map1 & map2;
 maskobj = zeros(size(tmp));
 maskobj(map)=1;
 maskobj = convn(maskobj,ones(3,3,3), 'same')/27;
-map = find(maskobj>=0.5);
+map3 = find(maskobj>=0.1);  % original 0.5
 maskobj = zeros(size(tmp));
-maskobj(map)=1;
+maskobj(map3)=1;
 
 % Estimation of the magnitude noise STD in HHH subband
-Nsig = median(abs(tmp(map)))/0.6745;
+Nsig = median(abs(tmp(map3)))/0.6745;
 
 
 
diff --git a/Code/Utils/MRIDenoisingPackage/NoiseEstimation/RicianSTDbg.m b/Code/Utils/MRIDenoisingPackage/NoiseEstimation/RicianSTDbg.m
index cd3c8b5..83d1153 100644
--- a/Code/Utils/MRIDenoisingPackage/NoiseEstimation/RicianSTDbg.m
+++ b/Code/Utils/MRIDenoisingPackage/NoiseEstimation/RicianSTDbg.m
@@ -21,7 +21,7 @@ function [sig maskobj SNR]=RicianSTDbg(ima,rician)
 %     volume 5762, chapter 73, pages 601-608. Springer Berlin Heidelberg,
 %     Berlin, Heidelberg, 2009.
 
-addpath wavelet
+%addpath wavelet
 
 double(ima);
 s=size(ima);
@@ -46,10 +46,15 @@ tmp = tmp(1:round((s(1)-1)/2),1:round((s(2)-1)/2),1:round((s(3)-1)/2));
 tmp2 = tmp2(1:round((s(1)-1)/2),1:round((s(2)-1)/2),1:round((s(3)-1)/2));
 
 % Detection of the object in the LLL subband
-[mu,mask]=kmeansclassif(tmp2,3);
-th=mean(mu(1:2));
+%[mu,mask]=kmeansclassif(tmp2,3);
+%th=mean(mu(1:2));
+%map = (tmp2(:,:,:)<th) & (tmp2(:,:,:)>0);
+[mu, mask, e] = vl_kmeans(tmp2,3, 'initialization', 'plusplus');
+mumean=sort(mean(mu),'ascend');
+th=mean(mumean(1:2));
 map = (tmp2(:,:,:)<th) & (tmp2(:,:,:)>0);
 
+
 % Detection of the High gradient area in the LLL subband
 [PX,PY,PZ] = gradient(tmp2);
 GR = sqrt(PX.^2 + PY.^2 + PZ.^2);
diff --git a/Code/Utils/MRIDenoisingPackage/NoiseEstimation/kmeansclassif.m b/Code/Utils/MRIDenoisingPackage/NoiseEstimation/kmeansclassif.m
index e75593c..a2f3bb3 100644
--- a/Code/Utils/MRIDenoisingPackage/NoiseEstimation/kmeansclassif.m
+++ b/Code/Utils/MRIDenoisingPackage/NoiseEstimation/kmeansclassif.m
@@ -1,4 +1,4 @@
-function [mu,mask]=kmeans(ima,k)
+function [mu,mask]=kmeansclassif(ima,k)
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %   kmeans image segmentation


* New modifications of the CoupeDemo code

http://personales.upv.es/jmanjon/denoising/prinlm.html

 - Create mex routines for float (single) matricies, with double floats in Bessel/Rician calls.
 - Allow multiple outputs of state variables
 - Implement complex pipeline
 - Implement B1 correction in NLmeans kernels


Modified version of the MRIDenoising package are in =matlab/NLmeans/MRIDenoisingModified=.

To compile the mex files, run:
#+BEGIN_SRC sh

matlab -nodesktop -nosplash -r "cd matlab/NLmeans/MRIDenoisingModified;
mex -v -compatibleArrayDims COMPFLAGS='$COMPFLAGS -Ofast'  myODCT3d.cpp;
mex -v -compatibleArrayDims COMPFLAGS='$COMPFLAGS -Ofast'  myMBONLM3D.cpp;
mex -v -compatibleArrayDims COMPFLAGS='$COMPFLAGS -Ofast' myRINLM3d.cpp;
"

#+END_SRC


* ITK N4Bias correction

B1 bias estimator using ITK's N4biascorrection.

On MASSIVE, the ants module (v 1.9.4) contains the compiled N4Bias example.

#+BEGIN_SRC sh
module load ants

N4BiasFieldCorrection -h
#+END_SRC

#+BEGIN_EXAMPLE

COMMAND: 
     N4BiasFieldCorrection
          N4 is a variant of the popular N3 (nonparameteric nonuniform normalization) 
          retrospective bias correction algorithm. Based on the assumption that the 
          corruption of the low frequency bias field can be modeled as a convolution of 
          the intensity histogram by a Gaussian, the basic algorithmic protocol is to 
          iterate between deconvolving the intensity histogram by a Gaussian, remapping 
          the intensities, and then spatially smoothing this result by a B-spline modeling 
          of the bias field itself. The modifications from and improvements obtained over 
          the original N3 algorithm are described in the following paper: N. Tustison et 
          al., N4ITK: Improved N3 Bias Correction, IEEE Transactions on Medical Imaging, 
          29(6):1310-1320, June 2010. 

OPTIONS: 
     -d, --image-dimensionality 2/3/4
          This option forces the image to be treated as a specified-dimensional image. If 
          not specified, N4 tries to infer the dimensionality from the input image. 

     -i, --input-image inputImageFilename
          A scalar image is expected as input for bias correction. Since N4 log transforms 
          the intensities, negative values or values close to zero should be processed 
          prior to correction. 

     -x, --mask-image maskImageFilename
          If a mask image is specified, the final bias correction is only performed in the 
          mask region. If a weight image is not specified, only intensity values inside 
          the masked region are used during the execution of the algorithm. If a weight 
          image is specified, only the non-zero weights are used in the execution of the 
          algorithm although the mask region defines where bias correction is performed in 
          the final output. Otherwise bias correction occurs over the entire image domain. 
          See also the option description for the weight image. 

     -w, --weight-image weightImageFilename
          The weight image allows the user to perform a relative weighting of specific 
          voxels during the B-spline fitting. For example, some studies have shown that N3 
          performed on white matter segmentations improves performance. If one has a 
          spatial probability map of the white matter, one can use this map to weight the 
          b-spline fitting towards those voxels which are more probabilistically 
          classified as white matter. See also the option description for the mask image. 

     -s, --shrink-factor 1/2/3/4/...
          Running N4 on large images can be time consuming. To lessen computation time, 
          the input image can be resampled. The shrink factor, specified as a single 
          integer, describes this resampling. Shrink factors <= 4 are commonly used. 

     -c, --convergence [<numberOfIterations=50x50x50x50>,<convergenceThreshold=0.000001>]
          Convergence is determined by calculating the coefficient of variation between 
          subsequent iterations. When this value is less than the specified threshold from 
          the previous iteration or the maximum number of iterations is exceeded the 
          program terminates. Multiple resolutions can be specified by using 'x' between 
          the number of iterations at each resolution, e.g. 100x50x50. 

     -b, --bspline-fitting [splineDistance,<splineOrder=3>]
                           [initialMeshResolution,<splineOrder=3>]
          These options describe the b-spline fitting parameters. The initial b-spline 
          mesh at the coarsest resolution is specified either as the number of elements in 
          each dimension, e.g. 2x2x3 for 3-D images, or it can be specified as a single 
          scalar parameter which describes the isotropic sizing of the mesh elements. The 
          latter option is typically preferred. For each subsequent level, the spline 
          distance decreases in half, or equivalently, the number of mesh elements doubles 
          Cubic splines (order = 3) are typically used. 

     -t, --histogram-sharpening [<FWHM=0.15>,<wienerNoise=0.01>,<numberOfHistogramBins=200>]
          These options describe the histogram sharpening parameters, i.e. the 
          deconvolution step parameters described in the original N3 algorithm. The 
          default values have been shown to work fairly well. 

     -o, --output [correctedImage,<biasField>]
          The output consists of the bias corrected version of the input image. 
          Optionally, one can also output the estimated bias field. 

     -h 
          Print the help menu (short version). 
          <VALUES>: 0

     --help 
          Print the help menu. 
          <VALUES>: 0
#+END_EXAMPLE

#+BEGIN_SRC sh
 N4BiasFieldCorrection --input-image 11_t1_mprage_sag_p2_iso_1mmbw980NOPS.nii.gz --output [mprage11correctedImage.nii.gz, mpragen4B1biasfield.nii.gz]
#+END_SRC
